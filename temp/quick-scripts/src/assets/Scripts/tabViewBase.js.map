{"version":3,"sources":["../../../../assets/Scripts/assets/Scripts/tabViewBase.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"../../../../assets/Scripts","sourcesContent":["const { ccclass, property } = cc._decorator;\n/**\n * tabView的控制基类\n * autor:daxing\n */\n@ccclass\nexport default class tabViewBase extends cc.Component {\n\n    @property({ type: cc.Vec2, tooltip: '按钮节点的尺寸' })\n    buttonItemContentSize = new cc.Vec2(100,50);\n\n    @property({ type: cc.Integer, tooltip: \"\" })\n    _tabCount = 0;\n    @property({ type: cc.Integer, tooltip: '按钮的个数' })\n    set tabCount(value) {\n        if (value < 2) {\n            cc.error(\"【tabview】最少需要两个按钮才可以切换，当前按钮的个数：\", value)\n        } else {\n            if(!this._buttonItem){\n                this._buttonItem  = cc.instantiate(this.initButtonNode(new cc.Node()));\n            }\n            this._tabCount = value;\n            this._addTabButton(value);\n            this._addTabEvent(value);\n        }\n    }\n    get tabCount() {\n        return this._tabCount;\n    }\n\n    @property({ type: cc.Node, tooltip: \"按钮的节点\" })\n    _buttonItem: cc.Node = null;\n\n    @property({ type: cc.Node, tooltip: \"按钮的节点\" })\n    set buttonItem(value) {\n        if (value) {\n            this._buttonItem = value as cc.Node;\n        }\n    }\n    get buttonItem() {\n        return this._buttonItem;\n    }\n\n    @property({ type: cc.Component.EventHandler, tooltip: '' })\n    _eventHandler: cc.Component.EventHandler[] = [];\n\n    @property({ type: cc.Component.EventHandler, tooltip: '按钮对应的的具体响应事件' })\n    set eventHandler(value) {\n        this._eventHandler = value;\n    }\n    get eventHandler() {\n        return this._eventHandler;\n    }\n\n    /**是否被选中 */\n    public _btnSelect: string = \"select\";\n\n    /**按钮的字体显示 */\n    public _btnLbl: string = \"lbl\";\n\n    /**当前tabView中的按钮的个数 */\n    private _btnList: cc.Node[] = [];\n\n    /**默认选中的按钮 */\n    private _index: number = null;\n\n\n    /**\n     * 添加按钮的数量\n     * @param buttonCount \n     */\n    _addTabButton(buttonCount: number) {\n        let btnCount = this.node.children;\n        if (btnCount.length == buttonCount) {\n            return;\n        } else if (btnCount.length < buttonCount) {\n            let leftCount = buttonCount - btnCount.length;\n            for (let i = 0; i < leftCount; i++) {\n                let tempNode = cc.instantiate(this.buttonItem);\n                this.node.addChild(tempNode);\n            }\n        } else {\n            for (let i = btnCount.length - 1; i >= buttonCount; i--) {\n                let tempNode = this.node.children[i];\n                tempNode.removeFromParent();\n                tempNode.destroy();\n            }\n        }\n    }\n\n    /**\n     * 添加按钮对应的事件\n     * @param buttonCount \n     */\n    _addTabEvent(buttonCount: number) {\n        if (this._eventHandler.length == buttonCount) {\n            return;\n        } else if (this._eventHandler.length < buttonCount) {\n            let leftCount = buttonCount - this._eventHandler.length;\n            for (let i = 0; i < leftCount; i++) {\n                cc.log(this._eventHandler);\n                let tempNode = new cc.Component.EventHandler();\n                this._eventHandler.push(tempNode);\n            }\n        } else {\n            for (let i = this._eventHandler.length - 1; i >= buttonCount; i--) {\n                this._eventHandler.pop();\n            }\n        }\n    }\n\n\n    /**\n     * 初始化对应的tabView，不要重写此函数\n     * @defaultSelect 默认选中的按钮\n     */\n    initTabView(defaultSelect: number = 0) {\n        this._btnList = this.node.children;\n        this._initBtn();\n        this._switchSelect(defaultSelect);\n    }\n\n    /**\n     * 初始化按钮\n     */\n    _initBtn() {\n        for (let i = 0; i < this._btnList.length; i++) {\n            let tempBtn = this._btnList[i];\n            this.refreshBtn(false, tempBtn);\n            tempBtn.on(cc.Node.EventType.TOUCH_END, event => {\n                cc.Component.EventHandler.emitEvents([this._eventHandler[i]],event);\n                this._switchSelect(i);\n                this.finishCallback(i);\n            })\n        }\n    }\n\n\n    /**\n    * 切换按钮的选中状态\n    * @param viewIndex \n    */\n    _switchSelect(viewIndex: number) {\n        if (this._index == viewIndex) {\n            return;\n        }\n        let selectBtnNode = this._btnList[viewIndex];\n        this.refreshBtn(true, selectBtnNode, viewIndex);\n\n        if (this._index != null) {\n            let lastSelectBtnNode = this._btnList[this._index];\n            this.refreshBtn(false, lastSelectBtnNode, this._index);\n        }\n\n        this._index = viewIndex;\n    }\n\n    /**\n    * 初始化按钮节点（重写此函数可以扩展button按钮节点）\n    */\n    protected initButtonNode(btnNode: cc.Node) {\n        return btnNode;\n    }\n\n    /**\n     * 按钮切换样式（派生类请重写此函数以实现自定义样式）\n     */\n    protected refreshBtn(isSelect: boolean, btnNode: cc.Node, btnIndex?: number) {\n\n    }\n\n    /**\n     * 切换之后的回调（派生类请重写此函数以实现切换之后的回调）\n     */\n    protected finishCallback(btnIndex: number) {\n\n    }\n\n}"]}